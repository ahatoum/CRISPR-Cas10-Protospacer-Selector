Instructions to Run the Code:

Download and place the two files (MainScript.py, GNfunctions.py) in the same directory. Edit the MainScript.py with your tag and genome sequence (variable gene). When the code runs, it creates a “Results.txt” file in the same directory that presents the tabulated results. Columns are as follows: Protospacer Coordinate (beginning in 5’ direction), Protospacer, Antitag, Spacer.


Code Description:

MainScript.py takes a gene sequence (in 5’-3’ direction) and crRNA 5’-tag (in 5’-3’ direction) as user inputs, and as outputs, produces all possible 35-nucleotide protospacers that exhibit zero complementarity between the protospacer adjacent anti-tag region and the crRNA 5’-tag. The reverse complement of the tag is first obtained to generate an eight-nucleotide comparison template. Within a loop, a window of eight nucleotides that progressively moves rightward is copied from the gene sequence and compared to the template derived from the user’s tag. In this comparison, when corresponding nucleotides are “not” equal to each other, a logic true is produced. Then the results of these Boolean comparisons are subjected to a logic AND operation among themselves, which yields true only when there is no match at any position between the nucleotides in the moving window and the comparison template. As the loop proceeds, each time the logic AND operation yields true, the beginning 5’-end coordinate of the moving window is recorded in an array with respect to the original gene sequence input, and a “possibility” counter is incremented by one. Each of these coordinates are required to be greater than 35 nucleotides into the gene (measuring from the 5’-end of the gene). Once this loop is completed, another loop begins, in which 35 nucleotides to the left of each recorded coordinate is extracted from the gene sequence—this is called the protospacer. The reverse complement of the protospacer is also generated as an output to indicate the corresponding spacer sequence that would need to be cloned into editing and targeting constructs.
